filter {
  if [type] =~ /spark.+?\.hadoop\.log/ or [type] =~ /sparkmaster.+?\.zkfc\.log/ {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => ["dateandtime", "YYYY-MM-dd HH:mm:ss,SSS"]
      target => "datetime"
      remove_field => "dateandtime"
    }
    if [loglevel] {
      ruby {
        code => "event['severity'] = event['loglevel'][0,1]"
      }
    }
  }
  if [type] =~ /spark.+?\.supervisord\.log/ {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => ["dateandtime", "YYYY-MM-dd HH:mm:ss,SSS"]
      target => "datetime"
      remove_field => "dateandtime"
    }
    if [loglevel] {
      ruby {
        code => "event['severity'] = event['loglevel'][0,1]"
      }
    }
  }
  if [type] =~ /sparkmaster.+?\.master\.log/ or [type] == "sparkworker.executor.log" or [type] == "sparkworker.worker.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}%{GREEDYDATA:message}\(%{NOTSPACE:className}\)" ]
      overwrite => [ "message" ]
    }
    date {
      match => ["dateandtime", "YYYY-MM-dd HH:mm:ss"]
      target => "datetime"
      remove_field => "dateandtime"
    }
    if [loglevel] {
      ruby {
        code => "event['severity'] = event['loglevel'][0,1]"
      }
    }
  }
  if [type] =~ /sparkmaster.+?\.messages\.log/ {
    multiline {
      pattern => "(^\[\d)|(WebSphere Application Server)"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "(?m)\[%{DATA:dateandtime}\]%{SPACE}%{WORD:threadId}%{SPACE}%{NOTSPACE:className}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => ["dateandtime", "M/d/yy H:mm:ss:SSS ZZZ"]
      target => "datetime"
      remove_field => "dateandtime"
    }
  }
  if [type] =~ /sparkmaster.+?\.trace\.log/ {
    multiline {
      pattern => "(^\[\d)|(WebSphere Application Server)"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "(?m)\[%{DATA:dateandtime}\]%{SPACE}%{WORD:threadId}%{SPACE}id=%{BASE16NUM:id}?%{SPACE}%{NOTSPACE:className}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:methodName}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => ["dateandtime", "M/d/yy H:mm:ss:SSS ZZZ"]
      target => "datetime"
      remove_field => "dateandtime"
    }
  }
}
